package server;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import output.CustomOutputStream;

/**
 *
 *
 * @author Manuel
 */
public class EchoServerGUI extends javax.swing.JFrame {

    private static final int PORT_NR = 9991;
    private ServerSocket server;
    private ArrayList<Client> clients = new ArrayList();
    private int threadCounter = 0;

    public EchoServerGUI() {
        initComponents();
        j_Log.setEditable(false);
    }

    public synchronized void communicate() throws IOException {
        PrintStream printStream = new PrintStream(new CustomOutputStream(j_Log));
        // re-assigns standard output stream and error output stream
        System.setOut(printStream);
        System.setErr(printStream);
        System.out.println("Starting Server!");
        server = new ServerSocket(PORT_NR);
    }

    public void acceptClients() throws IOException {
        Socket socket = server.accept();
        clients.add(new Client(socket));
        System.out.println("Client connected: " + socket.toString());
    }

    public void sendAndRecive(Client client) throws IOException {
        InputStream input = client.getSocket().getInputStream();
        BufferedReader reader = new BufferedReader(new InputStreamReader(input));
        String line = "";
        do {
            if (client.getName().isEmpty()) {
                client.setName(reader.readLine());
                line = client.getName() + " joined your channel!";
                sendNewRoomList();
            } else {
                line = client.getName() + " : " + reader.readLine();
            }
            System.out.println(line);
            for (Client c : clients) {
                if (!c.equals(client)) {
                    OutputStream output = c.getSocket().getOutputStream();
                    PrintWriter writer = new PrintWriter(output);
                    writer.println(line);
                    writer.flush();
                }
            }
        } while (rootPaneCheckingEnabled);
    }

    public void disconnectClient(Socket socket) throws IOException {
        socket.close();
        clients.remove(socket);
    }
    
    public void sendNewRoomList() throws IOException
    {
        for (Client c : clients) {
            String line = "---SHOW CLIENTS---\n";
            for (Client c1 : clients) {
                line += c1.getName()+"\n";
            }
            line += "---SHOWED CLIENTS---";
            OutputStream output = c.getSocket().getOutputStream();
            PrintWriter writer = new PrintWriter(output);
            writer.println(line);
            writer.flush();
        }
    }

    public class ServerGUIThread extends Thread {

        String name;
        EchoServerGUI server;

        public ServerGUIThread(String name, EchoServerGUI server) {
            this.server = server;
            this.name = name;
            start();
        }
        
        @Override
        public void run() {
            try {
                server.acceptClients();
                threadCounter++;
                new ServerGUIThread("ServerGUIThread " + threadCounter, EchoServerGUI.this);
                sendAndRecive(clients.get(threadCounter - 1));
            } catch (IOException ex) {
                System.out.println("Client disconnected!");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        j_Log = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        j_Log.setColumns(20);
        j_Log.setRows(5);
        jScrollPane1.setViewportView(j_Log);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Server");

        jMenuItem2.setText("Start Server");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onStart(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Close All Connections");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCloseAllConnections(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onStart(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onStart
        try {
            communicate();
        } catch (IOException ex) {
            System.out.println("Error: " + ex);
        }
        new ServerGUIThread("ServerGUIThread " + threadCounter, this);
    }//GEN-LAST:event_onStart

    private void onCloseAllConnections(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onCloseAllConnections
        for (Client c : clients) {
            try {
                c.getSocket().close();
            } catch (IOException ex) {
                System.out.println("Could not close Connection " + c.getName()+"!");
            }
        }
    }//GEN-LAST:event_onCloseAllConnections

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EchoServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EchoServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EchoServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EchoServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EchoServerGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea j_Log;
    // End of variables declaration//GEN-END:variables
}
